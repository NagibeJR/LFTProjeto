
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODleftEQNEQLTLEGTGEleftANDleftORrightNOTAND AS ASSIGN BOOLEAN BREAK CASE CATCH CLASS COLON COMMA CONST CONTINUE DEBUGGER DECLARE DEFAULT DELETE DIVIDE DO DOT ELSE ENUM EQ EXPORT EXTENDS FALSE FINALLY FOR FROM FUNCTION GE GET GT IDENTIFIER IF IMPLEMENTS IMPORT IN INFER INSTANCEOF INTERFACE IS KEYOF LBRACE LBRACKET LE LET LPAREN LT MINUS MOD MODULE NAMESPACE NEQ NEVER NEW NOT NULL NUMBER OBJECT OR PACKAGE PLUS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET READONLY REQUIRE RETURN RPAREN SEMICOLON SET STATIC STRING SUPER SWITCH SYMBOL THIS THROW TIMES TRUE TRY TYPE TYPEOF UNIQUE UNKNOWN VAR VOID WHILE WITH YIELDprogram : statements\n    statements : statement\n               | statement statements\n    statement : IDENTIFIER ASSIGN expression SEMICOLON\n    statement : IF LPAREN expression RPAREN statement\n              | IF LPAREN expression RPAREN statement ELSE statement\n    statement : WHILE LPAREN expression RPAREN statementstatement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statementstatement : FUNCTION IDENTIFIER LPAREN params RPAREN blockstatement : CLASS IDENTIFIER block\n    params : IDENTIFIER\n           | IDENTIFIER COMMA params\n    \n    block : LBRACE statements RBRACE\n          | LBRACE RBRACE\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression MOD expression\n               | expression EQ expression\n               | expression NEQ expression\n               | expression LT expression\n               | expression LE expression\n               | expression GT expression\n               | expression GE expression\n               | expression AND expression\n               | expression OR expression\n    \n    expression : NOT expression\n    \n    expression : LPAREN expression RPAREN\n    \n    expression : NUMBER\n               | STRING\n               | TRUE\n               | FALSE\n               | NULL\n               | IDENTIFIER\n               | IDENTIFIER LPAREN args RPAREN\n               | NEW IDENTIFIER LPAREN RPAREN\n    \n    args : expression\n         | expression COMMA args\n    '
    
_lr_action_items = {'IDENTIFIER':([0,3,8,9,11,12,13,14,19,20,26,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,51,52,53,57,75,76,78,80,82,84,85,87,89,91,92,],[4,4,15,16,17,17,17,17,17,17,50,54,-10,4,17,-4,17,17,17,17,17,17,17,17,17,17,17,17,17,4,4,17,-14,-5,-7,54,-13,17,4,17,-9,-6,4,-8,]),'IF':([0,3,31,32,34,51,52,57,75,76,80,84,87,89,91,92,],[5,5,-10,5,-4,5,5,-14,-5,-7,-13,5,-9,-6,5,-8,]),'WHILE':([0,3,31,32,34,51,52,57,75,76,80,84,87,89,91,92,],[6,6,-10,6,-4,6,6,-14,-5,-7,-13,6,-9,-6,6,-8,]),'FOR':([0,3,31,32,34,51,52,57,75,76,80,84,87,89,91,92,],[7,7,-10,7,-4,7,7,-14,-5,-7,-13,7,-9,-6,7,-8,]),'FUNCTION':([0,3,31,32,34,51,52,57,75,76,80,84,87,89,91,92,],[8,8,-10,8,-4,8,8,-14,-5,-7,-13,8,-9,-6,8,-8,]),'CLASS':([0,3,31,32,34,51,52,57,75,76,80,84,87,89,91,92,],[9,9,-10,9,-4,9,9,-14,-5,-7,-13,9,-9,-6,9,-8,]),'$end':([1,2,3,10,31,34,57,75,76,80,87,89,92,],[0,-1,-2,-3,-10,-4,-14,-5,-7,-13,-9,-6,-8,]),'RBRACE':([3,10,31,32,34,56,57,75,76,80,87,89,92,],[-2,-3,-10,57,-4,80,-14,-5,-7,-13,-9,-6,-8,]),'ASSIGN':([4,],[11,]),'LPAREN':([5,6,7,11,12,13,14,15,17,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,50,53,82,85,],[12,13,14,20,20,20,20,30,33,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,74,20,20,20,]),'NOT':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NUMBER':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'STRING':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'TRUE':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'FALSE':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NULL':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'NEW':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'LBRACE':([16,79,],[32,32,]),'SEMICOLON':([17,18,21,22,23,24,25,29,48,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,],[-35,34,-30,-31,-32,-33,-34,53,-28,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,85,-36,-37,]),'PLUS':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,35,-30,-31,-32,-33,-34,35,35,35,-28,35,35,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,35,-36,-37,35,]),'MINUS':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,36,-30,-31,-32,-33,-34,36,36,36,-28,36,36,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,36,-36,-37,36,]),'TIMES':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,37,-30,-31,-32,-33,-34,37,37,37,-28,37,37,37,37,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,37,-36,-37,37,]),'DIVIDE':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,38,-30,-31,-32,-33,-34,38,38,38,-28,38,38,38,38,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,38,-36,-37,38,]),'MOD':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,39,-30,-31,-32,-33,-34,39,39,39,-28,39,39,39,39,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,39,-36,-37,39,]),'EQ':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,40,-30,-31,-32,-33,-34,40,40,40,-28,40,40,40,40,40,40,40,-20,-21,-22,-23,-24,-25,-26,-27,-29,40,-36,-37,40,]),'NEQ':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,41,-30,-31,-32,-33,-34,41,41,41,-28,41,41,41,41,41,41,41,-20,-21,-22,-23,-24,-25,-26,-27,-29,41,-36,-37,41,]),'LT':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,42,-30,-31,-32,-33,-34,42,42,42,-28,42,42,42,42,42,42,42,-20,-21,-22,-23,-24,-25,-26,-27,-29,42,-36,-37,42,]),'LE':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,43,-30,-31,-32,-33,-34,43,43,43,-28,43,43,43,43,43,43,43,-20,-21,-22,-23,-24,-25,-26,-27,-29,43,-36,-37,43,]),'GT':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,44,-30,-31,-32,-33,-34,44,44,44,-28,44,44,44,44,44,44,44,-20,-21,-22,-23,-24,-25,-26,-27,-29,44,-36,-37,44,]),'GE':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,45,-30,-31,-32,-33,-34,45,45,45,-28,45,45,45,45,45,45,45,-20,-21,-22,-23,-24,-25,-26,-27,-29,45,-36,-37,45,]),'AND':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,46,-30,-31,-32,-33,-34,46,46,46,-28,46,46,46,46,46,46,46,46,46,46,46,46,46,-26,-27,-29,46,-36,-37,46,]),'OR':([17,18,21,22,23,24,25,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,81,83,90,],[-35,47,-30,-31,-32,-33,-34,47,47,47,-28,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-27,-29,47,-36,-37,47,]),'RPAREN':([17,21,22,23,24,25,27,28,48,49,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,83,86,88,90,],[-35,-30,-31,-32,-33,-34,51,52,-28,73,-11,79,81,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,83,-36,-37,-12,-39,91,]),'COMMA':([17,21,22,23,24,25,48,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,83,],[-35,-30,-31,-32,-33,-34,-28,78,82,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,-36,-37,]),'ELSE':([31,34,57,75,76,80,87,89,92,],[-10,-4,-14,84,-7,-13,-9,-6,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,32,],[2,10,56,]),'statement':([0,3,32,51,52,84,91,],[3,3,3,75,76,89,92,]),'expression':([11,12,13,14,19,20,33,35,36,37,38,39,40,41,42,43,44,45,46,47,53,82,85,],[18,27,28,29,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,59,90,]),'block':([16,79,],[31,87,]),'params':([30,78,],[55,86,]),'args':([33,82,],[58,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','ExpressionLanguageSint.py',66),
  ('statements -> statement','statements',1,'p_statements','ExpressionLanguageSint.py',72),
  ('statements -> statement statements','statements',2,'p_statements','ExpressionLanguageSint.py',73),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','ExpressionLanguageSint.py',82),
  ('statement -> IF LPAREN expression RPAREN statement','statement',5,'p_statement_if','ExpressionLanguageSint.py',87),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement_if','ExpressionLanguageSint.py',88),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_statement_while','ExpressionLanguageSint.py',96),
  ('statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement','statement',9,'p_statement_for','ExpressionLanguageSint.py',100),
  ('statement -> FUNCTION IDENTIFIER LPAREN params RPAREN block','statement',6,'p_statement_function','ExpressionLanguageSint.py',104),
  ('statement -> CLASS IDENTIFIER block','statement',3,'p_statement_class','ExpressionLanguageSint.py',108),
  ('params -> IDENTIFIER','params',1,'p_params','ExpressionLanguageSint.py',114),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','ExpressionLanguageSint.py',115),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','ExpressionLanguageSint.py',125),
  ('block -> LBRACE RBRACE','block',2,'p_block','ExpressionLanguageSint.py',126),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',137),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',138),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',139),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',140),
  ('expression -> expression MOD expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',141),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',142),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',143),
  ('expression -> expression LT expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',144),
  ('expression -> expression LE expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',145),
  ('expression -> expression GT expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',146),
  ('expression -> expression GE expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',147),
  ('expression -> expression AND expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',148),
  ('expression -> expression OR expression','expression',3,'p_expression_binary','ExpressionLanguageSint.py',149),
  ('expression -> NOT expression','expression',2,'p_expression_unary','ExpressionLanguageSint.py',155),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','ExpressionLanguageSint.py',161),
  ('expression -> NUMBER','expression',1,'p_expression_value','ExpressionLanguageSint.py',167),
  ('expression -> STRING','expression',1,'p_expression_value','ExpressionLanguageSint.py',168),
  ('expression -> TRUE','expression',1,'p_expression_value','ExpressionLanguageSint.py',169),
  ('expression -> FALSE','expression',1,'p_expression_value','ExpressionLanguageSint.py',170),
  ('expression -> NULL','expression',1,'p_expression_value','ExpressionLanguageSint.py',171),
  ('expression -> IDENTIFIER','expression',1,'p_expression_value','ExpressionLanguageSint.py',172),
  ('expression -> IDENTIFIER LPAREN args RPAREN','expression',4,'p_expression_value','ExpressionLanguageSint.py',173),
  ('expression -> NEW IDENTIFIER LPAREN RPAREN','expression',4,'p_expression_value','ExpressionLanguageSint.py',174),
  ('args -> expression','args',1,'p_args','ExpressionLanguageSint.py',180),
  ('args -> expression COMMA args','args',3,'p_args','ExpressionLanguageSint.py',181),
]
