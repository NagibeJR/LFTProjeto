
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN BOOLEAN BOOLEAN BREAK CASE CATCH CLASS CLASS COLON COMMA CONST CONTINUE DEBUGGER DECLARE DEFAULT DELETE DIVIDE DO DOT ELSE ELSE ENUM EQ EXPORT EXTENDS EXTENDS FALSE FINALLY FOR FOR FROM FUNCTION FUNCTION GE GET GT IDENTIFIER IF IF IMPLEMENTS IMPLEMENTS IMPORT IN INFER INSTANCEOF INTERFACE INTERFACE IS KEYOF LBRACE LBRACKET LE LET LPAREN LT MINUS MOD MODULE NAMESPACE NEQ NEVER NEW NOT NULL NUMBER NUMBER OBJECT OR PACKAGE PLUS PRIVATE PRIVATE PROTECTED PUBLIC PUBLIC RBRACE RBRACKET READONLY REQUIRE RETURN RPAREN SEMICOLON SET STATIC STATIC STRING STRING SUPER SWITCH SYMBOL THIS THROW TIMES TRUE TRY TYPE TYPEOF UNIQUE UNKNOWN VAR VOID VOID WHILE WHILE WITH YIELD\n    program : statement\n    \n    statement : IDENTIFIER ASSIGN expression SEMICOLON\n              | IF LPAREN expression RPAREN statement\n              | IF LPAREN expression RPAREN statement ELSE statement\n              | WHILE LPAREN expression RPAREN statement\n              | FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement\n              | FUNCTION IDENTIFIER LPAREN params RPAREN block\n              | CLASS IDENTIFIER block\n    \n    params : IDENTIFIER\n           | IDENTIFIER COMMA params\n    \n    block : LBRACE RBRACE\n          | LBRACE statements RBRACE\n    \n    statements : statement\n               | statement statements\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression MOD expression\n               | LPAREN expression RPAREN\n               | expression EQ expression\n               | expression NEQ expression\n               | expression LT expression\n               | expression LE expression\n               | expression GT expression\n               | expression GE expression\n               | expression AND expression\n               | expression OR expression\n               | NOT expression\n               | NUMBER\n               | STRING\n               | TRUE\n               | FALSE\n               | NULL\n               | IDENTIFIER\n               | IDENTIFIER LPAREN args RPAREN\n               | NEW IDENTIFIER LPAREN RPAREN\n    \n    args : expression\n         | expression COMMA args\n    '
    
_lr_action_items = {'IDENTIFIER':([0,7,8,9,10,11,12,17,18,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,54,56,74,75,77,79,82,84,85,87,89,91,92,],[3,13,14,15,15,15,15,15,15,48,52,-8,3,15,-2,15,15,15,15,15,15,15,15,15,15,15,15,15,3,3,15,-11,3,-3,-5,52,-12,15,3,15,-7,-4,3,-6,]),'IF':([0,29,30,32,49,50,54,56,74,75,79,84,87,89,91,92,],[4,-8,4,-2,4,4,-11,4,-3,-5,-12,4,-7,-4,4,-6,]),'WHILE':([0,29,30,32,49,50,54,56,74,75,79,84,87,89,91,92,],[5,-8,5,-2,5,5,-11,5,-3,-5,-12,5,-7,-4,5,-6,]),'FOR':([0,29,30,32,49,50,54,56,74,75,79,84,87,89,91,92,],[6,-8,6,-2,6,6,-11,6,-3,-5,-12,6,-7,-4,6,-6,]),'FUNCTION':([0,29,30,32,49,50,54,56,74,75,79,84,87,89,91,92,],[7,-8,7,-2,7,7,-11,7,-3,-5,-12,7,-7,-4,7,-6,]),'CLASS':([0,29,30,32,49,50,54,56,74,75,79,84,87,89,91,92,],[8,-8,8,-2,8,8,-11,8,-3,-5,-12,8,-7,-4,8,-6,]),'$end':([1,2,29,32,54,74,75,79,87,89,92,],[0,-1,-8,-2,-11,-3,-5,-12,-7,-4,-6,]),'ASSIGN':([3,],[9,]),'LPAREN':([4,5,6,9,10,11,12,13,15,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,51,82,85,],[10,11,12,17,17,17,17,28,31,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,73,17,17,17,]),'NOT':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'STRING':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'TRUE':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'FALSE':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'NULL':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'NEW':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'LBRACE':([14,78,],[30,30,]),'SEMICOLON':([15,16,19,20,21,22,23,27,47,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,],[-35,32,-30,-31,-32,-33,-34,51,-29,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-20,85,-36,-37,]),'PLUS':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,33,-30,-31,-32,-33,-34,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-20,33,-36,-37,33,]),'MINUS':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,34,-30,-31,-32,-33,-34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-20,34,-36,-37,34,]),'TIMES':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,35,-30,-31,-32,-33,-34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-20,35,-36,-37,35,]),'DIVIDE':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,36,-30,-31,-32,-33,-34,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-20,36,-36,-37,36,]),'MOD':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,37,-30,-31,-32,-33,-34,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-20,37,-36,-37,37,]),'EQ':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,38,-30,-31,-32,-33,-34,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-20,38,-36,-37,38,]),'NEQ':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,39,-30,-31,-32,-33,-34,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-20,39,-36,-37,39,]),'LT':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,40,-30,-31,-32,-33,-34,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-20,40,-36,-37,40,]),'LE':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,41,-30,-31,-32,-33,-34,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-20,41,-36,-37,41,]),'GT':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,42,-30,-31,-32,-33,-34,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-20,42,-36,-37,42,]),'GE':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,43,-30,-31,-32,-33,-34,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-20,43,-36,-37,43,]),'AND':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,44,-30,-31,-32,-33,-34,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-20,44,-36,-37,44,]),'OR':([15,16,19,20,21,22,23,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,81,83,90,],[-35,45,-30,-31,-32,-33,-34,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-20,45,-36,-37,45,]),'RPAREN':([15,19,20,21,22,23,25,26,46,47,52,53,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,83,86,88,90,],[-35,-30,-31,-32,-33,-34,49,50,72,-29,-9,78,81,-38,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-20,83,-36,-37,-10,-39,91,]),'COMMA':([15,19,20,21,22,23,47,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,81,83,],[-35,-30,-31,-32,-33,-34,-29,77,82,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-20,-36,-37,]),'RBRACE':([29,30,32,54,55,56,74,75,79,80,87,89,92,],[-8,54,-2,-11,79,-13,-3,-5,-12,-14,-7,-4,-6,]),'ELSE':([29,32,54,74,75,79,87,89,92,],[-8,-2,-11,84,-5,-12,-7,-4,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,30,49,50,56,84,91,],[2,56,74,75,56,89,92,]),'expression':([9,10,11,12,17,18,31,33,34,35,36,37,38,39,40,41,42,43,44,45,51,82,85,],[16,25,26,27,46,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,58,90,]),'block':([14,78,],[29,87,]),'params':([28,77,],[53,86,]),'statements':([30,56,],[55,80,]),'args':([31,82,],[57,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','ExpressionLanguageSint.py',58),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement','ExpressionLanguageSint.py',64),
  ('statement -> IF LPAREN expression RPAREN statement','statement',5,'p_statement','ExpressionLanguageSint.py',65),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement','ExpressionLanguageSint.py',66),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_statement','ExpressionLanguageSint.py',67),
  ('statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement','statement',9,'p_statement','ExpressionLanguageSint.py',68),
  ('statement -> FUNCTION IDENTIFIER LPAREN params RPAREN block','statement',6,'p_statement','ExpressionLanguageSint.py',69),
  ('statement -> CLASS IDENTIFIER block','statement',3,'p_statement','ExpressionLanguageSint.py',70),
  ('params -> IDENTIFIER','params',1,'p_params','ExpressionLanguageSint.py',75),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','ExpressionLanguageSint.py',76),
  ('block -> LBRACE RBRACE','block',2,'p_block','ExpressionLanguageSint.py',81),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','ExpressionLanguageSint.py',82),
  ('statements -> statement','statements',1,'p_statements','ExpressionLanguageSint.py',87),
  ('statements -> statement statements','statements',2,'p_statements','ExpressionLanguageSint.py',88),
  ('expression -> expression PLUS expression','expression',3,'p_expression','ExpressionLanguageSint.py',93),
  ('expression -> expression MINUS expression','expression',3,'p_expression','ExpressionLanguageSint.py',94),
  ('expression -> expression TIMES expression','expression',3,'p_expression','ExpressionLanguageSint.py',95),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','ExpressionLanguageSint.py',96),
  ('expression -> expression MOD expression','expression',3,'p_expression','ExpressionLanguageSint.py',97),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','ExpressionLanguageSint.py',98),
  ('expression -> expression EQ expression','expression',3,'p_expression','ExpressionLanguageSint.py',99),
  ('expression -> expression NEQ expression','expression',3,'p_expression','ExpressionLanguageSint.py',100),
  ('expression -> expression LT expression','expression',3,'p_expression','ExpressionLanguageSint.py',101),
  ('expression -> expression LE expression','expression',3,'p_expression','ExpressionLanguageSint.py',102),
  ('expression -> expression GT expression','expression',3,'p_expression','ExpressionLanguageSint.py',103),
  ('expression -> expression GE expression','expression',3,'p_expression','ExpressionLanguageSint.py',104),
  ('expression -> expression AND expression','expression',3,'p_expression','ExpressionLanguageSint.py',105),
  ('expression -> expression OR expression','expression',3,'p_expression','ExpressionLanguageSint.py',106),
  ('expression -> NOT expression','expression',2,'p_expression','ExpressionLanguageSint.py',107),
  ('expression -> NUMBER','expression',1,'p_expression','ExpressionLanguageSint.py',108),
  ('expression -> STRING','expression',1,'p_expression','ExpressionLanguageSint.py',109),
  ('expression -> TRUE','expression',1,'p_expression','ExpressionLanguageSint.py',110),
  ('expression -> FALSE','expression',1,'p_expression','ExpressionLanguageSint.py',111),
  ('expression -> NULL','expression',1,'p_expression','ExpressionLanguageSint.py',112),
  ('expression -> IDENTIFIER','expression',1,'p_expression','ExpressionLanguageSint.py',113),
  ('expression -> IDENTIFIER LPAREN args RPAREN','expression',4,'p_expression','ExpressionLanguageSint.py',114),
  ('expression -> NEW IDENTIFIER LPAREN RPAREN','expression',4,'p_expression','ExpressionLanguageSint.py',115),
  ('args -> expression','args',1,'p_args','ExpressionLanguageSint.py',120),
  ('args -> expression COMMA args','args',3,'p_args','ExpressionLanguageSint.py',121),
]
